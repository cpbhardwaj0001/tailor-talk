import os
import zipfile

# Define the folder structure and code content
project_files = {
    "ai_calendar_bot/README.md": """# AI Appointment Booking Bot

A conversational AI agent that helps users book meetings via Google Calendar using natural language.

## Stack
- **Backend:** FastAPI + LangGraph
- **Frontend:** Streamlit
- **Calendar:** Google Calendar API
""",

    "ai_calendar_bot/main.py": '''from fastapi import FastAPI
from pydantic import BaseModel
from langchain.agents import initialize_agent, Tool
from langchain.chat_models import ChatOpenAI
from calendar_tools import check_availability, book_meeting

app = FastAPI()

class Message(BaseModel):
    message: str

llm = ChatOpenAI(model="gpt-4o")

tools = [
    Tool(name="CheckAvailability", func=check_availability, description="Check calendar availability"),
    Tool(name="BookMeeting", func=book_meeting, description="Book a meeting in calendar"),
]

agent_executor = initialize_agent(tools, llm, agent_type="chat-conversational-react-description")

@app.post("/chat")
async def chat_handler(msg: Message):
    response = agent_executor.run(input=msg.message)
    return {"response": response}
''',

    "ai_calendar_bot/calendar_tools.py": '''from datetime import datetime, timedelta
from google.oauth2 import service_account
from googleapiclient.discovery import build

SCOPES = ['https://www.googleapis.com/auth/calendar']
SERVICE_ACCOUNT_FILE = 'credentials.json'
CALENDAR_ID = 'primary'

credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

service = build('calendar', 'v3', credentials=credentials)

def check_availability(input_text: str) -> str:
    now = datetime.utcnow().isoformat() + 'Z'
    events_result = service.events().list(
        calendarId=CALENDAR_ID,
        timeMin=now,
        maxResults=5,
        singleEvents=True,
        orderBy='startTime'
    ).execute()

    events = events_result.get('items', [])
    if not events:
        return "You're free for the next few hours."
    else:
        times = [f"{event['summary']} at {event['start']['dateTime']}" for event in events]
        return "You're busy with: " + ", ".join(times)

def book_meeting(time_slot: str) -> str:
    event = {
        'summary': 'AI Booked Meeting',
        'start': {
            'dateTime': time_slot,
            'timeZone': 'Asia/Kolkata',
        },
        'end': {
            'dateTime': (datetime.fromisoformat(time_slot) + timedelta(hours=1)).isoformat(),
            'timeZone': 'Asia/Kolkata',
        },
    }

    event = service.events().insert(calendarId=CALENDAR_ID, body=event).execute()
    return f"Meeting booked at {event['start']['dateTime']}"
''',

    "ai_calendar_bot/app.py": '''import streamlit as st
import requests

st.title("ðŸ“… AI Appointment Booker")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

user_input = st.text_input("You:", key="input")

if user_input:
    st.session_state.chat_history.append(("user", user_input))
    response = requests.post("http://localhost:8000/chat", json={"message": user_input})
    reply = response.json()["response"]
    st.session_state.chat_history.append(("agent", reply))

for sender, msg in st.session_state.chat_history:
    if sender == "user":
        st.markdown(f"**You:** {msg}")
    else:
        st.markdown(f"**AI:** {msg}")
''',
}

# Create the zip file
zip_path = ""C:\Users\DELL\Desktop\ai_calendar_bot.zip""
with zipfile.ZipFile(zip_path, 'w') as zipf:
    for filepath, content in project_files.items():
        temp_path = f"/tmp/{filepath}"
        os.makedirs(os.path.dirname(temp_path), exist_ok=True)
        with open(temp_path, "w") as f:
            f.write(content)
        zipf.write(temp_path, arcname=filepath)

zip_path
